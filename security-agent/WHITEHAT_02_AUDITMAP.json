{
  "audit_items": [
    {
      "file": "src/common/cosigner/asymmetric_eddsa_cosigner.cpp",
      "line": 37,
      "snippet": "assert(path.size() == BIP44_PATH_LENGTH);",
      "risk_category": "Input-Validation",
      "description": "Runtime assertion could crash in production if path length invalid. Attack vector: Malicious client sends path.size() != 5, causing process crash.",
      "status": "Vuln",
      "proof_trace": [
        "derivation_key_delta (L29-60)",
        "↳ path.size() check at L33",
        "↳ assert on user-controlled path length at L37"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_setup_service.cpp",
      "line": 61,
      "snippet": "if (t != n)",
      "risk_category": "Protocol-Limitation",
      "description": "CMP protocol only supports n-of-n signatures (no threshold). This is a fundamental protocol limitation, not implementation bug.",
      "status": "ok",
      "proof_trace": [
        "generate_setup_commitments (L54-65)",
        "↳ Protocol design requires all parties to participate"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_setup_service.cpp",
      "line": 101,
      "snippet": "while (i < MAX_ATTEMPTS)",
      "risk_category": "Timing-Analysis",
      "description": "Timing variation in key generation is acceptable since this is a one-time setup operation with no secret input correlation.",
      "status": "ok",
      "proof_trace": [
        "generate_setup_commitments (L95-124)",
        "↳ Random key generation loop at L105-117",
        "↳ No correlation between timing and existing secrets"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_setup_service.cpp",
      "line": 506,
      "snippet": "paillier_generate_key_pair(PAILLIER_KEY_SIZE, &paillier_pub, &paillier_priv)",
      "risk_category": "Key-Strength",
      "description": "PAILLIER_KEY_SIZE = 256 bits * 8 * 8 = 2048 bits, meets current security standards.",
      "status": "ok",
      "proof_trace": [
        "create_auxiliary_keys (L504-540)",
        "↳ PAILLIER_KEY_SIZE defined at L20 as 2048 bits"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_offline_refresh_service.cpp",
      "line": 29,
      "snippet": "void refresh_key_request(...)",
      "risk_category": "Proactive-Security",
      "description": "Key refresh protocol for proactive security. Prevents long-term key compromise by rotating shares without changing public key.",
      "status": "ok",
      "proof_trace": [
        "refresh_key_request (L29-88)",
        "↳ Tenant isolation check at L34",
        "↳ Player validation at L42-48"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_offline_refresh_service.cpp",
      "line": 89,
      "snippet": "void refresh_key(...)",
      "risk_category": "Share-Refresh",
      "description": "Key share update using PRFs to generate consistent random shares across parties. Implements proactive security properly.",
      "status": "ok",
      "proof_trace": [
        "refresh_key (L89-160)",
        "↳ PRF-based share generation at L130-145"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_ecdsa_signing_service.cpp",
      "line": 252,
      "snippet": "void make_sig_s_positive(...)",
      "risk_category": "Signature-Normalization",
      "description": "Enforces low-s rule to prevent signature malleability. Critical for blockchain compatibility and preventing transaction malleability attacks.",
      "status": "ok",
      "proof_trace": [
        "make_sig_s_positive (L252-263)",
        "↳ Proper low-s enforcement with v-value adjustment"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/eddsa_online_signing_service.cpp",
      "line": 135,
      "snippet": "uint64_t store_commitments(...)",
      "risk_category": "Commitment-Scheme",
      "description": "Commitment storage with proper verification. Prevents parties from changing R values after commitment phase.",
      "status": "ok",
      "proof_trace": [
        "store_commitments (L135-190)",
        "↳ Commitment verification at L179"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/mta.cpp",
      "line": 76,
      "snippet": "static inline void genarate_mta_range_zkp_seed(...)",
      "risk_category": "Challenge-Generation",
      "description": "Fiat-Shamir challenge derived from proof commitment. Binds all proof elements to prevent malleability attacks.",
      "status": "ok",
      "proof_trace": [
        "genarate_mta_range_zkp_seed (L76-96)",
        "↳ SHA256 binding of all proof elements"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/mta.cpp",
      "line": 504,
      "snippet": "byte_vector_t beta(secret_size * BETA_HIDING_FACTOR);",
      "risk_category": "Statistical-Hiding",
      "description": "BETA_HIDING_FACTOR=5 provides 1280 bits of statistical hiding (256*5), which exceeds standard 128-bit security parameter.",
      "status": "ok",
      "proof_trace": [
        "response (L495-535)",
        "↳ BETA_HIDING_FACTOR defined at L32 as 5"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/mta.cpp",
      "line": 700,
      "snippet": "void batch_response_verifier::process(...)",
      "risk_category": "ZKP-Verification",
      "description": "Critical MTA proof verification with range validation. Properly validates z1 and z2 ranges to prevent overflow attacks.",
      "status": "ok",
      "proof_trace": [
        "process (L700-794)",
        "↳ Range checks at L730-740 prevent overflow"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/mta.cpp",
      "line": 800,
      "snippet": "void batch_response_verifier::verify()",
      "risk_category": "Statistical-Security",
      "description": "Batch verification with BATCH_STATISTICAL_SECURITY rounds. Provides 2^-BATCH_STATISTICAL_SECURITY soundness against malicious proofs.",
      "status": "ok",
      "proof_trace": [
        "verify (L800-850)",
        "↳ Statistical security through batch verification"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/mta.cpp",
      "line": 852,
      "snippet": "if (is_coprime_fast(response, _my_paillier->pub.n, _ctx.get()) != 1)",
      "risk_category": "Timing-Attack",
      "description": "Non-constant time is_coprime_fast on public ciphertexts. While ciphertexts are public, timing variations could leak decryption failures. Risk: Low - attacker learns only if ciphertext is valid, not secret data.",
      "status": "Vuln",
      "proof_trace": [
        "process_paillier (L854-890)",
        "↳ is_coprime_fast calls at L868, L874, L880, L886"
      ],
      "review_round": 6
    },
    {
      "file": "src/common/cosigner/cmp_ecdsa_online_signing_service.cpp",
      "line": 91,
      "snippet": "if (blocks > MAX_BLOCKS_TO_SIGN)",
      "risk_category": "DoS-Prevention",
      "description": "Proper DoS prevention through MAX_BLOCKS_TO_SIGN limit. Prevents resource exhaustion from excessive signing requests.",
      "status": "ok",
      "proof_trace": [
        "start_signing (L63-95)",
        "↳ Block limit check at L91-95"
      ],
      "review_round": 6
    }
  ],
  "summary": {
    "rounds": 6,
    "total_audit_flags": 14,
    "high_risk_hotspots": [
      "src/common/cosigner/asymmetric_eddsa_cosigner.cpp:assertion_crash",
      "src/common/cosigner/mta.cpp:timing_attacks_in_ciphertext_validation"
    ],
    "review_summary": {
      "transformed_to_audit_ok": 12,
      "kept_as_vuln": 2,
      "new_findings": 0,
      "risk_distribution": {
        "critical": 0,
        "high": 1,
        "medium": 1,
        "low": 0
      }
    },
    "next_focus": "Fix critical issues: 1) Replace assert with proper exception handling in asymmetric_eddsa_cosigner.cpp, 2) Consider constant-time alternatives for ciphertext validation in mta.cpp if timing leaks are a concern"
  }
}